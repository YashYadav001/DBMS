/*CREATE TABLE CUSTOMER (
    customer_Id NUMBER,
    first_name VARCHAR2(50),
    last_name VARCHAR2(50),
    middle_name VARCHAR2(50),
    address_line1 VARCHAR2(100),
    address_line2 VARCHAR2(100),
    city VARCHAR2(50),
    country VARCHAR2(50),
    region VARCHAR2(50)
);

CREATE OR REPLACE PROCEDURE ADD_MEMBER
(
    c_id IN NUMBER ,
    c_fname IN VARCHAR2,
    c_lname IN VARCHAR2,
    c_mname IN VARCHAR2,
    c_add1 IN VARCHAR2,
    c_add2 IN VARCHAR2,
    c_city IN VARCHAR2,
    c_country IN VARCHAR2,
    c_region IN VARCHAR2,
    total_count OUT NUMBER
)
AS
BEGIN 
    INSERT INTO CUSTOMER(customer_Id, first_name, last_name, middle_name,
                         address_line1, address_line2, city, country, region)
    VALUES (c_id, c_fname, c_lname, c_mname, c_add1, c_add2, c_city, c_country, c_region);
    COMMIT;
    total_count := SQL%ROWCOUNT;
    DBMS_OUTPUT.PUT_LINE('DATA ADDED SUCCESSFULLY');
END ADD_MEMBER;*/


/*1) Write a procedure to fetch data from table SALES for a given parameter orderid and
display the data. */
CREATE TABLE SALES (
    SALES_DATE DATE,
    ORDER_ID NUMBER,
    PRODUCT_ID NUMBER,
    CUSTOMER_ID NUMBER,
    SALESPERSON_ID NUMBER,
    QUANTITY NUMBER,
    UNIT_PRICE NUMBER,
    SALES_AMOUNT NUMBER,
    TAX_AMOUNT NUMBER,
    TOTAL_AMOUNT NUMBER
);
-- Inserting sample data into the SALES table
INSERT INTO SALES (SALES_DATE, ORDER_ID, PRODUCT_ID, CUSTOMER_ID, SALESPERSON_ID, QUANTITY, UNIT_PRICE, SALES_AMOUNT, TAX_AMOUNT, TOTAL_AMOUNT)
VALUES (TO_DATE('2024-05-01', 'YYYY-MM-DD'), 1, 101, 1001, 201, 5, 10.00, 50.00, 5.00, 55.00);

INSERT INTO SALES (SALES_DATE, ORDER_ID, PRODUCT_ID, CUSTOMER_ID, SALESPERSON_ID, QUANTITY, UNIT_PRICE, SALES_AMOUNT, TAX_AMOUNT, TOTAL_AMOUNT)
VALUES (TO_DATE('2024-05-05', 'YYYY-MM-DD'), 2, 102, 1002, 202, 3, 15.00, 45.00, 4.50, 49.50);



CREATE PROCEDURE fetch_datas (S_ORDERID NUMBER)
AS
    L_DATE SALES.SALES_DATE%TYPE;
L_ORDERID SALES.ORDER_ID%TYPE;
L_PRODUCTID SALES.PRODUCT_ID%TYPE;
L_CUSTOMERID SALES.CUSTOMER_ID%TYPE;
L_SALESPERSONID SALES.SALESPERSON_ID%TYPE;
L_QUANTITY SALES.QUANTITY%TYPE;
L_UNITPRICE SALES.UNIT_PRICE%TYPE;
L_SALESAMOUNT SALES.SALES_AMOUNT%TYPE;
L_TAXAMOUNT SALES.TAX_AMOUNT%TYPE;
L_TOTALAMOUNT SALES.TOTAL_AMOUNT%TYPE;

BEGIN 
SELECT SALES_DATE, ORDER_ID, PRODUCT_ID, CUSTOMER_ID, SALESPERSON_ID, QUANTITY, UNIT_PRICE, SALES_AMOUNT, TAX_AMOUNT, TOTAL_AMOUNT 
INTO   L_DATE, L_ORDERID, L_PRODUCTID, L_CUSTOMERID, L_SALESPERSONID, L_QUANTITY, L_UNITPRICE,L_SALESAMOUNT, L_TAXAMOUNT, L_TOTALAMOUNT FROM SALES WHERE ORDER_ID = S_ORDERID;
COMMIT;
 DBMS_OUTPUT.PUT_LINE (L_DATE);
 DBMS_OUTPUT.PUT_LINE (L_ORDERID);
 DBMS_OUTPUT.PUT_LINE (L_PRODUCTID);
 DBMS_OUTPUT.PUT_LINE (L_CUSTOMERID);
 DBMS_OUTPUT.PUT_LINE (L_SALESPERSONID);
 DBMS_OUTPUT.PUT_LINE (L_QUANTITY);
 DBMS_OUTPUT.PUT_LINE (L_UNITPRICE);
 DBMS_OUTPUT.PUT_LINE (L_SALESAMOUNT);
 DBMS_OUTPUT.PUT_LINE (L_TAXAMOUNT);
 DBMS_OUTPUT.PUT_LINE (L_TOTALAMOUNT);
END;
EXEC fetch_datas(1);


/*2) Write a procedure which does the following operations
 Fetch data from table SALES for a given parameter orderid and display the data.
 Return the number of rows(using OUT parameter) in the SALES table for that
sales date (get sales date from the above operations)*/
CREATE OR REPLACE PROCEDURE fetch_data1 (S_ORDERID NUMBER, NO_ROWS IN OUT NUMBER)
AS
    L_DATE SALES.SALES_DATE%TYPE;
    L_ORDERID SALES.ORDER_ID%TYPE;
    L_PRODUCTID SALES.PRODUCT_ID%TYPE;
    L_CUSTOMERID SALES.CUSTOMER_ID%TYPE;
    L_SALESPERSONID SALES.SALESPERSON_ID%TYPE;
    L_QUANTITY SALES.QUANTITY%TYPE;
    L_UNITPRICE SALES.UNIT_PRICE%TYPE;
    L_SALESAMOUNT SALES.SALES_AMOUNT%TYPE;
    L_TAXAMOUNT SALES.TAX_AMOUNT%TYPE;
    L_TOTALAMOUNT SALES.TOTAL_AMOUNT%TYPE;
BEGIN 
    SELECT SALES_DATE, ORDER_ID, PRODUCT_ID, CUSTOMER_ID, SALESPERSON_ID, QUANTITY, UNIT_PRICE, SALES_AMOUNT, TAX_AMOUNT, TOTAL_AMOUNT 
    INTO   L_DATE, L_ORDERID, L_PRODUCTID, L_CUSTOMERID, L_SALESPERSONID, L_QUANTITY, L_UNITPRICE, L_SALESAMOUNT, L_TAXAMOUNT, L_TOTALAMOUNT 
    FROM SALES 
    WHERE ORDER_ID = S_ORDERID;

    DBMS_OUTPUT.PUT_LINE ('SALES_DATE: ' || TO_CHAR(L_DATE, 'YYYY-MM-DD'));
    DBMS_OUTPUT.PUT_LINE ('ORDER_ID: ' || L_ORDERID);
    DBMS_OUTPUT.PUT_LINE ('PRODUCT_ID: ' || L_PRODUCTID);
    DBMS_OUTPUT.PUT_LINE ('CUSTOMER_ID: ' || L_CUSTOMERID);
    DBMS_OUTPUT.PUT_LINE ('SALESPERSON_ID: ' || L_SALESPERSONID);
    DBMS_OUTPUT.PUT_LINE ('QUANTITY: ' || L_QUANTITY);
    DBMS_OUTPUT.PUT_LINE ('UNIT_PRICE: ' || L_UNITPRICE);
    DBMS_OUTPUT.PUT_LINE ('SALES_AMOUNT: ' || L_SALESAMOUNT);
    DBMS_OUTPUT.PUT_LINE ('TAX_AMOUNT: ' || L_TAXAMOUNT);
    DBMS_OUTPUT.PUT_LINE ('TOTAL_AMOUNT: ' || L_TOTALAMOUNT);

   
    SELECT COUNT(1) INTO NO_ROWS FROM SALES WHERE SALES_DATE = L_DATE;
END;
/
DECLARE
TOTAL_ROWS NUMBER;
BEGIN 
fetch_data1(1,TOTAL_ROWS);
DBMS_OUTPUT.PUT_LINE('NO OF ROWS ARE ' || TOTAL_ROWS) ;
END ;


/*3) Write a function which accepts 2 numbers n1 and n2 and returns the power of n1 to n2.
 (Example: If I pass values 10 and 3, the output should be 1000)
*/
CREATE OR REPLACE FUNCTION POWER (
    num1 IN OUT NUMBER,
    num2 IN OUT NUMBER
) RETURN NUMBER
AS
    POWER_VALUE NUMBER := 1;
BEGIN
    FOR NUMBER0 IN 1..num2 LOOP
        POWER_VALUE := POWER_VALUE * num1; -- Multiply num1 by itself num2 times
    END LOOP;
    RETURN POWER_VALUE; -- Return the result after the loop completes
END;

SELECT POWER(100,3)FROM DUAL;

/*4) Write a function to display the number of rows in the SALES table for a given sales date.*/
CREATE OR REPLACE FUNCTION ROW_NUMBER(
    no_of_rows IN OUT NUMBER ;
)RETURN NUMBER
AS 
BEGIN 
